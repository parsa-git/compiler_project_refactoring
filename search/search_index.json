{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Compiler projects By: Saeed Parsa Welcome to Compiler Course Introdcution Facatory refactoring","title":"Home"},{"location":"#compiler-projects","text":"By: Saeed Parsa Welcome to Compiler Course","title":"Compiler projects"},{"location":"#introdcution","text":"","title":"Introdcution"},{"location":"#facatory-refactoring","text":"","title":"Facatory refactoring"},{"location":"factory/","text":"Factory design pattern This class refactors a given class based on the Factory pattern using ANTLR enterClassDeclaration ( self , ctx ) To update site: mkdocs gh-deploy Accepts the class name and returns the position of the class to be refactored Source code in factory\\factory.py def enterClassDeclaration ( self , ctx : JavaParserLabeled . ClassDeclarationContext ): \"\"\" To update site: mkdocs gh-deploy Accepts the class name and returns the position of the class to be refactored \"\"\" if ctx . IDENTIFIER () . getText () == self . creator_identifier : self . inCreator = True self . CretorStartIndex = ctx . classBody () . start . tokenIndex self . currentClass = ctx . IDENTIFIER () . symbol . text elif ctx . IDENTIFIER () . getText () in self . products_identifier : self . inProducts = True self . productsClassIndex . append ( ctx . IDENTIFIER () . symbol . tokenIndex ) self . currentClass = ctx . IDENTIFIER () . symbol . text","title":"Factory Pattern"},{"location":"factory/#factory-design-pattern","text":"This class refactors a given class based on the Factory pattern using ANTLR","title":"Factory design pattern"},{"location":"factory/#Refactoring.Factory.Factory.FactoryMethodRefactoringListener.enterClassDeclaration","text":"To update site: mkdocs gh-deploy Accepts the class name and returns the position of the class to be refactored Source code in factory\\factory.py def enterClassDeclaration ( self , ctx : JavaParserLabeled . ClassDeclarationContext ): \"\"\" To update site: mkdocs gh-deploy Accepts the class name and returns the position of the class to be refactored \"\"\" if ctx . IDENTIFIER () . getText () == self . creator_identifier : self . inCreator = True self . CretorStartIndex = ctx . classBody () . start . tokenIndex self . currentClass = ctx . IDENTIFIER () . symbol . text elif ctx . IDENTIFIER () . getText () in self . products_identifier : self . inProducts = True self . productsClassIndex . append ( ctx . IDENTIFIER () . symbol . tokenIndex ) self . currentClass = ctx . IDENTIFIER () . symbol . text","title":"enterClassDeclaration()"},{"location":"singleton/","text":"Singleton design pattern This class refactors a given class based on the Singleton pattern using ANTLR __init__ ( self , common_token_stream = None , class_identifier = None ) special :param common_token_stream: Source code in singleton\\singleton.py def __init__ ( self , common_token_stream : CommonTokenStream = None , class_identifier : str = None ): \"\"\" :param common_token_stream: \"\"\" self . enter_class = False self . token_stream = common_token_stream self . class_identifier = class_identifier self . ObjectIndex = [] # Move all the tokens in the source code in a buffer, token_stream_rewriter. if common_token_stream is not None : self . token_stream_rewriter = TokenStreamRewriter ( common_token_stream ) else : raise TypeError ( 'common_token_stream is None' )","title":"Singleton"},{"location":"singleton/#singleton-design-pattern","text":"This class refactors a given class based on the Singleton pattern using ANTLR","title":"Singleton design pattern"},{"location":"singleton/#Refactoring.Singleton.Singleton.SingletonRefactoringListener.__init__","text":":param common_token_stream: Source code in singleton\\singleton.py def __init__ ( self , common_token_stream : CommonTokenStream = None , class_identifier : str = None ): \"\"\" :param common_token_stream: \"\"\" self . enter_class = False self . token_stream = common_token_stream self . class_identifier = class_identifier self . ObjectIndex = [] # Move all the tokens in the source code in a buffer, token_stream_rewriter. if common_token_stream is not None : self . token_stream_rewriter = TokenStreamRewriter ( common_token_stream ) else : raise TypeError ( 'common_token_stream is None' )","title":"__init__()"}]}